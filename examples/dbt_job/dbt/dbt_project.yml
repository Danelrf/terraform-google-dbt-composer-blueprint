# Copyright 2023 Google LLC

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     https://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'dbt_composer_sample'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'example_profile'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: []
test-paths: []
seed-paths: []
macro-paths: []
snapshot-paths: []

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
    - "target"
    - "dbt_packages"
    - "logs"

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models
models:
  dbt_composer_sample:
      # Storing the failures for all the tests
      +store_failures: true  # all tests
      # Config to store the columns descriptions in datacatalog
      +persist_docs:
          relation: true
          columns: true

# Add a on-run-start hook to execute a trivial query (SELECT 1) that will
# also generate a special single line comment /* DBT <json> */. This single
# line comment will be picked up through the audit logs and include all
# DBT metadata custom environment variables and startup arguments.
on-run-start:
  - >
      /* DBT {
      "project": "{{ project_name }}",
      "env": {{ tojson(dbt_metadata_envs|default({})) }},
      "args":  {{ tojson(invocation_args_dict|default({})) }}
      } */
      SELECT 1
